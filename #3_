const {
    Connection,
    PublicKey,
    clusterApiUrl
} = require('@solana/web3.js');
const bs58 = require('bs58');
const { MongoClient } = require('mongodb');

// MongoDB setup
const MONGO_URI = 'mongodb+srv://joseseb400:<80225adA>@bot.2bwfk.mongodb.net/?retryWrites=true&w=majority&appName=BOT';
const client = new MongoClient(MONGO_URI);
let db;

async function connectToDatabase() {
    try {
        await client.connect();
        db = client.db('Test1'); // Use the "Test1" database
        console.log("Connected to MongoDB.");
    } catch (error) {
        console.error("MongoDB connection error:", error.message);
    }
}

// Connect to Solana cluster
const WS_URL = clusterApiUrl('mainnet-beta');
const connection = new Connection(WS_URL, 'confirmed');

// Raydium AMM program ID
const RAYDIUM_AMM_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');

async function processTransaction(transactionDetails) {
    const message = transactionDetails.transaction.message;
    const accountKeys = message.staticAccountKeys.map(key => key.toString());

    let mint0 = PublicKey.default;
    let mint1 = PublicKey.default;
    let lpTokenMint = PublicKey.default;
    let deployer = PublicKey.default;
    let poolId = PublicKey.default;
    let baseVault = PublicKey.default;
    let quoteVault = PublicKey.default;
    let params = {};

    for (let i = 0; i < message.instructions.length; i++) {
        const instruction = message.instructions[i];
        const programId = message.staticAccountKeys[instruction.programIdIndex].toString();

        if (programId === RAYDIUM_AMM_PROGRAM_ID.toString() && instruction.data.length > 0) {
            mint0 = accountKeys[instruction.accountKeyIndexes[8]];
            mint1 = accountKeys[instruction.accountKeyIndexes[9]];
            params = instruction.data;
            lpTokenMint = accountKeys[instruction.accountKeyIndexes[7]];
            deployer = accountKeys[instruction.accountKeyIndexes[17]];
            poolId = accountKeys[instruction.accountKeyIndexes[4]];
            baseVault = accountKeys[instruction.accountKeyIndexes[10]];
            quoteVault = accountKeys[instruction.accountKeyIndexes[11]];

            const ammKeys = {
                amm_pool: poolId,
                amm_coin_mint: mint0,
                amm_pc_mint: mint1,
                amm_authority: accountKeys[instruction.accountKeyIndexes[5]],
                amm_target: accountKeys[instruction.accountKeyIndexes[13]],
                amm_coin_vault: baseVault,
                amm_pc_vault: quoteVault,
                amm_lp_mint: lpTokenMint,
                amm_open_order: accountKeys[instruction.accountKeyIndexes[6]],
                market_program: accountKeys[instruction.accountKeyIndexes[15]],
                market: accountKeys[instruction.accountKeyIndexes[16]],
                nonce: params[0] // Assuming nonce is the first element in params array
            };

            // Insert the event into MongoDB
            try {
                const result = await db.collection('Test1').insertOne({
                    signature: transactionDetails.transaction.signatures[0],
                    amm_pool: ammKeys.amm_pool,
                    amm_coin_mint: ammKeys.amm_coin_mint,
                    amm_pc_mint: ammKeys.amm_pc_mint,
                    amm_lp_mint: ammKeys.amm_lp_mint,
                    timestamp: new Date()
                });
                console.log("Inserted event into MongoDB:", result.insertedId);
            } catch (dbError) {
                console.error("Error inserting into MongoDB:", dbError.message);
            }
            break;
        }
    }
}

// Function to subscribe to transactions on the Solana blockchain
async function subscribeRaydium() {
    console.log("Listening for new Raydium LP transactions...");

    connection.onLogs(RAYDIUM_AMM_PROGRAM_ID, async (log) => {
        try {
            const signature = log.signature;
            const transactionDetails = await connection.getTransaction(signature, {
                commitment: 'confirmed',
                maxSupportedTransactionVersion: 0
            });

            if (transactionDetails) {
                await processTransaction(transactionDetails);
            } else {
                console.error("Failed to fetch transaction details.");
            }
        } catch (error) {
            console.error("Error processing AMM LP event:", error.message);
        }
    }, 'confirmed');
}

// Start the subscription and connect to MongoDB
(async () => {
    await connectToDatabase();
    subscribeRaydium().catch(console.error);
})();
