const {
    Connection,
    PublicKey,
    clusterApiUrl
} = require('@solana/web3.js');
const bs58 = require('bs58');

// The WebSocket URL for Solana mainnet-beta
const WS_URL = 'https://api.mainnet-beta.solana.com/';

// Connect to Solana cluster using the provided WebSocket URL
const connection = new Connection(WS_URL, 'confirmed');

// The address of the Raydium AMM program on Solana
const RAYDIUM_AMM_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');

// Function to subscribe to transactions on the Solana blockchain
async function subscribeRaydium() {
    console.log("Listening for new Raydium LP transactions...");

    connection.onLogs(RAYDIUM_AMM_PROGRAM_ID, async (log) => {
        try {
            // Filter logs to find 'InitializeInstruction2' or 'CreatePool'
            if (log.logs.some(line => line.includes('InitializeInstruction2') || line.includes('CreatePool'))) {
                console.log("New AMM LP transaction found!");

                // Debug: print the full logs to inspect
                console.log("Full Logs:", log.logs);

                const signature = log.signature;
                console.log("Transaction Signature:", signature);

                // Fetch the full transaction details
                const transactionDetails = await connection.getTransaction(signature, {
                    commitment: 'confirmed'
                });

                if (transactionDetails) {
                    console.log("Transaction Details:", transactionDetails);

                    // Attempt to decode the public keys used in the transaction
                    try {
                        const accountKeys = transactionDetails.transaction.message.accountKeys.map(key => key.toString());
                        console.log("Accounts involved in transaction:", accountKeys);

                        // Additional processing can be done here, such as tracking the involved accounts

                    } catch (error) {
                        console.error("Error decoding public keys:", error.message);
                    }
                } else {
                    console.error("Failed to fetch transaction details.");
                }
            }
        } catch (error) {
            console.error("Error processing AMM LP event:", error.message);
        }
    });
}

// Start the subscription
subscribeRaydium().catch(console.error);
