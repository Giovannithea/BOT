const {
    Connection,
    PublicKey,
    clusterApiUrl
} = require('@solana/web3.js');
const { MongoClient } = require('mongodb');

// MongoDB setup
const MONGO_URI = ' insert Mongo uri';
const client = new MongoClient(MONGO_URI);
let db;

async function connectToDatabase() {
    try {
        await client.connect();
        db = client.db('Test1'); // Use the "Test1" database
        console.log("Connected to MongoDB.");
    } catch (error) {
        console.error("MongoDB connection error:", error.message);
    }
}

// The WebSocket URL for Solana mainnet-beta
const WS_URL = 'https://api.mainnet-beta.solana.com/';

// Connect to Solana cluster using the provided WebSocket URL
const connection = new Connection(WS_URL, 'confirmed');

// The address of the Raydium AMM program on Solana
const RAYDIUM_AMM_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');

// Function to subscribe to transactions on the Solana blockchain
async function subscribeRaydium() {
    console.log("Listening for new Raydium LP transactions...");

    connection.onLogs(RAYDIUM_AMM_PROGRAM_ID, async (log) => {
        try {
            // Filter logs to find 'InitializeInstruction2' or 'CreatePool'
            if (log.logs.some(line => line.includes('InitializeInstruction2') || line.includes('CreatePool'))) {
                console.log("New AMM LP transaction found!");

                const signature = log.signature;
                console.log("Transaction Signature:", signature);

                // Fetch the full transaction details
                const transactionDetails = await connection.getTransaction(signature, {
                    commitment: 'confirmed',
                    maxSupportedTransactionVersion: 0
                });

                if (transactionDetails) {
                    console.log("Transaction Details:", transactionDetails);

                    // Decode transaction message and instruction data
                    const message = transactionDetails.transaction.message;
                    const accounts = message.staticAccountKeys.map(key => key.toString());

                    // Initialize the necessary variables
                    let mint0, mint1, lpTokenMint, deployer, poolId, baseVault, quoteVault;

                    // Loop through each instruction in the transaction
                    for (const ix of message.instructions) {
                        const programId = message.staticAccountKeys[ix.programIdIndex].toString();

                        // Check if the instruction is from the Raydium AMM program
                        if (programId === RAYDIUM_AMM_PROGRAM_ID.toString() && ix.data.length > 0) {
                            console.log("Found Raydium AMM instruction!");

                            // Extract accounts involved in the instruction
                            mint0 = accounts[ix.accounts[8]];
                            mint1 = accounts[ix.accounts[9]];
                            lpTokenMint = accounts[ix.accounts[7]];
                            deployer = accounts[ix.accounts[17]];
                            poolId = accounts[ix.accounts[4]];
                            baseVault = accounts[ix.accounts[10]];
                            quoteVault = accounts[ix.accounts[11]];
                            const ammAuthority = accounts[ix.accounts[5]];
                            const ammTarget = accounts[ix.accounts[13]];
                            const ammOpenOrder = accounts[ix.accounts[6]];
                            const serumMarket = accounts[ix.accounts[16]];
                            const serumProgram = accounts[ix.accounts[15]];

                            // Construct AMM keys
                            const ammKeys = {
                                amm_pool: poolId,
                                amm_coin_mint: mint0,
                                amm_pc_mint: mint1,
                                amm_authority: ammAuthority,
                                amm_target: ammTarget,
                                amm_coin_vault: baseVault,
                                amm_pc_vault: quoteVault,
                                amm_lp_mint: lpTokenMint,
                                amm_open_order: ammOpenOrder,
                                market_program: serumProgram,
                                market: serumMarket,
                                nonce: null // Update this if necessary
                            };

                            console.log("AMM Keys:", ammKeys);

                            // Insert the event into MongoDB
                            try {
                                const result = await db.collection('Test1').insertOne({
                                    signature: signature,
                                    mint0: mint0,
                                    mint1: mint1,
                                    lpTokenMint: lpTokenMint,
                                    deployer: deployer,
                                    poolId: poolId,
                                    baseVault: baseVault,
                                    quoteVault: quoteVault,
                                    timestamp: new Date()
                                });
                                console.log("Inserted event into MongoDB:", result.insertedId);
                            } catch (dbError) {
                                console.error("Error inserting into MongoDB:", dbError.message);
                            }

                            break; // Exit loop after finding the first relevant instruction
                        }
                    }
                } else {
                    console.error("Failed to fetch transaction details.");
                }
            }
        } catch (error) {
            console.error("Error processing AMM LP event:", error.message);
        }
    }, 'confirmed');
}

// Start the subscription and connect to MongoDB
(async () => {
    await connectToDatabase();
    subscribeRaydium().catch(console.error);
})();
